// Copyright (C) 2020  Matthew "strager" Glazar
// See end of file for extended copyright information.

// Code generated by tools/generate-trace-sources.cpp. DO NOT EDIT.
// source: src/quick-lint-js/logging/trace-types.h

// This file is a template for the 010 Editor. Use it to inspect quick-lint-js
// trace files. See docs/TRACING.md for more details.

typedef struct {
    uquad length;
    if (length > 0) {
        wchar_t data[length];
    }
} utf16le_string <read=read_utf16le_string>;

wstring read_utf16le_string(utf16le_string &s) {
    if (s.length == 0) {
        return L"(empty string)";
    } else {
        return s.data;
    }
}

typedef struct {
    uquad length;
    if (length > 0) {
        char data[length];
    }
} utf8_string <read=read_utf8_string>;

wstring read_utf8_string(utf8_string &s) {
    if (s.length == 0) {
        return "(empty string)";
    } else {
        return s.data;
    }
}

struct Header {
    uint magic; // 0xc1 0x1f 0xfc 0xc1
    byte uuid[16];
    uquad thread_id;
    ubyte compression_mode;
};

enum <ubyte> Event_Type {
    init = 0x01,
    vscode_document_opened = 0x02,
    vscode_document_closed = 0x03,
    vscode_document_changed = 0x04,
    vscode_document_sync = 0x05,
    lsp_client_to_server_message = 0x06,
    vector_max_size_histogram_by_owner = 0x07,
    process_id = 0x08,
    lsp_documents = 0x09,
};

typedef uquad Trace_Document_ID <format=hex>;

struct Trace_Event_Init {
    string version;
};

struct Trace_Event_VSCode_Document_Opened {
    Trace_Document_ID document_id;
    utf16le_string uri;
    utf16le_string language_id;
    utf16le_string content;
};

struct Trace_Event_VSCode_Document_Closed {
    Trace_Document_ID document_id;
    utf16le_string uri;
    utf16le_string language_id;
};

struct Trace_VSCode_Document_Position {
    uquad line;
    uquad character;
};

struct Trace_VSCode_Document_Range {
    Trace_VSCode_Document_Position start;
    Trace_VSCode_Document_Position end;
};

struct Trace_VSCode_Document_Change {
    Trace_VSCode_Document_Range range;
    uquad range_offset;
    uquad range_length;
    utf16le_string text;
};

struct Trace_Event_VSCode_Document_Changed {
    Trace_Document_ID document_id;
    uquad change_count;
    Trace_VSCode_Document_Change changes[change_count] <optimize=false>;
};

struct Trace_Event_VSCode_Document_Sync {
    Trace_Document_ID document_id;
    utf16le_string uri;
    utf16le_string language_id;
    utf16le_string content;
};

struct Trace_Event_LSP_Client_To_Server_Message {
    utf8_string body;
};

struct Trace_Vector_Max_Size_Histogram_Entry {
    uquad max_size;
    uquad count;
};

struct Trace_Vector_Max_Size_Histogram_By_Owner_Entry {
    string owner;
    uquad max_size_entry_count;
    Trace_Vector_Max_Size_Histogram_Entry max_size_entries[max_size_entry_count] <optimize=false>;
};

struct Trace_Event_Vector_Max_Size_Histogram_By_Owner {
    uquad entry_count;
    Trace_Vector_Max_Size_Histogram_By_Owner_Entry entries[entry_count] <optimize=false>;
};

struct Trace_Event_Process_ID {
    uquad process_id;
};

enum <ubyte> Trace_LSP_Document_Type {
    unknown = 0,
    config = 1,
    lintable = 2,
};

struct Trace_LSP_Document_State {
    Trace_LSP_Document_Type type;
    utf8_string uri;
    utf8_string text;
    utf8_string language_id;
};

struct Trace_Event_LSP_Documents {
    uquad document_count;
    Trace_LSP_Document_State documents[document_count] <optimize=false>;
};

typedef struct {
    uquad timestamp;
    Event_Type event_id;
    if (event_id == init) {
        Trace_Event_Init event <open=true, name="Trace_Event_Init">;
    }
    if (event_id == vscode_document_opened) {
        Trace_Event_VSCode_Document_Opened event <open=true, name="Trace_Event_VSCode_Document_Opened">;
    }
    if (event_id == vscode_document_closed) {
        Trace_Event_VSCode_Document_Closed event <open=true, name="Trace_Event_VSCode_Document_Closed">;
    }
    if (event_id == vscode_document_changed) {
        Trace_Event_VSCode_Document_Changed event <open=true, name="Trace_Event_VSCode_Document_Changed">;
    }
    if (event_id == vscode_document_sync) {
        Trace_Event_VSCode_Document_Sync event <open=true, name="Trace_Event_VSCode_Document_Sync">;
    }
    if (event_id == lsp_client_to_server_message) {
        Trace_Event_LSP_Client_To_Server_Message event <open=true, name="Trace_Event_LSP_Client_To_Server_Message">;
    }
    if (event_id == vector_max_size_histogram_by_owner) {
        Trace_Event_Vector_Max_Size_Histogram_By_Owner event <open=true, name="Trace_Event_Vector_Max_Size_Histogram_By_Owner">;
    }
    if (event_id == process_id) {
        Trace_Event_Process_ID event <open=true, name="Trace_Event_Process_ID">;
    }
    if (event_id == lsp_documents) {
        Trace_Event_LSP_Documents event <open=true, name="Trace_Event_LSP_Documents">;
    }
} Event <read=ReadEvent>;

string ReadEvent(Event &e) {
    return EnumToString(e.event_id);
}

LittleEndian();
Header header;
while (!FEof()) {
    Event event;
}

// quick-lint-js finds bugs in JavaScript programs.
// Copyright (C) 2020  Matthew "strager" Glazar
//
// This file is part of quick-lint-js.
//
// quick-lint-js is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// quick-lint-js is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with quick-lint-js.  If not, see <https://www.gnu.org/licenses/>.
